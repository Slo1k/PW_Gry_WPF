@page "/editgame/{gameId:int}"
@using KrakowiakKozlowski.Games.BL;
@inject NavigationManager NavManager

<div class="wrapper">
    @if(game is null) 
    {
    <h1>
        No game of ID: @gameId
    </h1>
    }
    @if(game is not null)
    {
        <h1>
            Edit Game
        </h1>
        <form class='form' @onsubmit="HandleFormSubmit">
            <label for="game-title">
                Name
            </label>
            <input id="game-title" type="text" @bind-value="formModel.Title" required />

            <label for="game-releaseyear">
                Release Year
            </label>
            <input id="game-releaseyear" type="number" @bind-value="formModel.ReleaseYear" required />

            <label for="game-score">
                Score
            </label>
            <input id="game-score" type="number" @bind-value="formModel.Score" required />
            
            <label for="game-producer">
                Producer
            </label>
            <select id="game-producer" @bind="formModel.ProducerId" required>
                @foreach (var producer in producers)
                {
                    <option value="@producer.Id">@producer.Name</option>
                }
            </select>

            <label for="game-genre">
                Genre
            </label>
            <select id="game-genre" @bind="formModel.Genre" required>
                @foreach (var genre in Enum.GetNames(typeof(KrakowiakKozlowski.Games.CORE.GameGenre)))
                {
                    <option value="@genre">@genre</option>
                }
            </select>

            <button 
                class="add-btn"
                type="submit"
            >
                Confirm Edit
            </button>
        </form>
    }
</div>

@code {
    [Parameter] public int gameId { get; set; }
    private FormModel formModel = new FormModel();

    BLC dataAccess;

    public EditGame()
    {
        dataAccess = BLC.Instance;
    }

    private class FormModel
    {
        public string Title { get; set; }
        public int ReleaseYear { get; set; }
        public int Score { get; set; }
        public int ProducerId { get; set; }
        public KrakowiakKozlowski.Games.CORE.GameGenre Genre { get; set; }
    }
    private KrakowiakKozlowski.Games.INTERFACES.IGame? game;

    private void HandleFormSubmit()
    {

        game.Id = gameId;
        game.Title = formModel.Title;
        game.ReleaseYear = formModel.ReleaseYear;
        game.Score = formModel.Score;
        game.Genre = formModel.Genre;
        game.Producer = producers.FirstOrDefault(p => p.Id == formModel.ProducerId);

        if (!Validate()) 
        {
            return;
        }

        dataAccess.DAO.UpdateGame(game);

        // Reset the form
        formModel = new FormModel();

        NavManager.NavigateTo("/games");
    }
    private bool Validate() 
    {
        if (game.Title.Length > 0 && game.Producer is not null)
        {
            return true;
        }
        return false;
    }

    private List<KrakowiakKozlowski.Games.INTERFACES.IProducer> producers;
    protected override void OnInitialized()
    {
        producers = dataAccess.DAO.GetAllProducers().ToList();
        game = dataAccess.DAO.GetAllGames().FirstOrDefault(gm => gm.Id.Equals(gameId));
        if (game is not null) 
        {
            formModel.Title = game.Title;
            formModel.ReleaseYear = game.ReleaseYear;
            formModel.Score = game.Score;
            formModel.Genre = game.Genre;
            formModel.ProducerId = game.Producer.Id;
        }
    }
}