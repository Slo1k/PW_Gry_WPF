@page "/newgame"
@using KrakowiakKozlowski.Games.BL
@inject NavigationManager NavManager

<div class="wrapper">
    <h1>
        Add New Game
    </h1>
    <form class='form' @onsubmit="HandleFormSubmit">
        <label for="game-title">
            Name
        </label>
        <input id="game-title" type="text" @bind-value="formModel.Title" required />

        <label for="game-releaseyear">
            Release Year
        </label>
        <input id="game-releaseyear" type="number" @bind-value="formModel.ReleaseYear" required />

        <label for="game-score">
            Score
        </label>
        <input id="game-score" type="number" @bind-value="formModel.Score" required />
        
        <label for="game-producer">
            game-producer
        </label>
        <select id="game-producer" @bind="formModel.ProducerId" required>
            @foreach (var producer in producers)
            {
                <option value="@producer.Id">@producer.Name</option>
            }
        </select>

        <label for="game-genre">
            Genre
        </label>
        <select id="game-genre" @bind="formModel.Genre" required>
            @foreach (var genre in Enum.GetNames(typeof(KrakowiakKozlowski.Games.CORE.GameGenre)))
            {
                <option value="@genre">@genre</option>
            }
        </select>

        <button 
            class="add-btn"
            type="submit"
        >
            Add Game
        </button>

    </form>
</div>

@code {
    private FormModel formModel = new FormModel();

    DataAccess dataAccess;

    public NewGame()
    {
        dataAccess = Singleton.Instance;
    }

    private class FormModel
    {
        public string Title { get; set; }
        public int ReleaseYear { get; set; }
        public int Score { get; set; }
        public int ProducerId { get; set; }
        public KrakowiakKozlowski.Games.CORE.GameGenre Genre { get; set; }
    }

    private void HandleFormSubmit()
    {
        int newGameId = games.Max(p => p.Id) + 1;

        if (formModel.Title.Length <= 0)
        {
            return;
        }

        dataAccess.DAO.AddNewGame(newGameId, formModel.Title, formModel.ReleaseYear, formModel.Genre, formModel.Score, formModel.ProducerId);

        // Reset the form
        formModel = new FormModel();

        games = dataAccess.DAO.GetAllGames().ToList();
        NavManager.NavigateTo("/games");
    }
    private List<KrakowiakKozlowski.Games.INTERFACES.IProducer> producers;
    private List<KrakowiakKozlowski.Games.INTERFACES.IGame> games;

    protected override void OnInitialized()
    {
        games = dataAccess.DAO.GetAllGames().ToList();
        producers = dataAccess.DAO.GetAllProducers().ToList();
    }
}