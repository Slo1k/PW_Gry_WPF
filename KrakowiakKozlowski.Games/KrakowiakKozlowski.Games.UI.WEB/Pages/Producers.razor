@page "/producers"
@using KrakowiakKozlowski.Games.BL
@using KrakowiakKozlowski.Games.UI.WEB.Components
@inject NavigationManager NavManager

<PageTitle>
    Games Catalog - Producers
</PageTitle>

<div class="wrapper">
    <div
        class='catalog-header'
    >
        <h1>Producers</h1>
        <NavLink
            href="newproducer"
            style="text-decoration: none"
        >
            <div class='catalog-header-btn'>
                Add New Producer
            </div>
        </NavLink>
    </div>
    <div
        style="display: flex; gap: 10px; width: 100%; margin-bottom: 10px"
    >
        <input
            type="text"
            placeholder="Search Producers by Name"
            class='catalog-input'
            @bind="searchTerm"
        />
        <button 
            class="catalog-input-btn" 
            @onclick="Search"
        >
            Search
        </button>
    </div>
    <div
        class="catalog-container"
    >
    @if (filteredProducers.Any()) 
    {
        @foreach (var producer in filteredProducers)
        {
            <div class="catalog-element">
                
                <NavLink
                    href="@($"producer/{producer.Id}")"
                    style="text-decoration: none; color: black"
                >
                    <span>@producer.Name</span>
                </NavLink>
                <div>
                    <button 
                        class="catalog-element-btn edit"
                        @onclick="() => NavigateToEdit(producer.Id)"
                    >
                        edit
                    </button>
                    <button 
                        class="catalog-element-btn remove"
                        @onclick="() => ShowRemoveConfirmation(producer)"
                    >
                        remove
                    </button>
                </div>
            </div>
        }
    }
    @if(filteredProducers == null || filteredProducers.Count == 0) {
        <div style='text-align: center; padding: 10px 0'>
            No producers to display
        </div>
    }
    </div>
    <NavLink
        href="/"
        style="text-decoration: none"
    >
        <span class='back-btn'>
            Go Back to <strong>Main Page</strong>
        </span>
    </NavLink>

</div>
@if(isConfirmModalOpen) {
    <ConfirmModal 
        OnConfirm="HandleConfirm"
        OnCancel="HandleCancel" 
    >
        Are you sure you want to remove <strong>"@selectedProducer.Name"</strong>? 
    </ConfirmModal>
}

@code {
    private string searchTerm = "";
    private bool isConfirmModalOpen = false;
    private KrakowiakKozlowski.Games.INTERFACES.IProducer? selectedProducer;

    BLC dataAccess;
    public Producers()
    {
        dataAccess = BLC.Instance;
    }

    List<KrakowiakKozlowski.Games.INTERFACES.IProducer> producers;
    private List<KrakowiakKozlowski.Games.INTERFACES.IProducer> filteredProducers = new List<KrakowiakKozlowski.Games.INTERFACES.IProducer>();
    private void NavigateToEdit(int id)
    {
        NavManager.NavigateTo("/editproducer/" + id);
    }
    private void ShowRemoveConfirmation(KrakowiakKozlowski.Games.INTERFACES.IProducer producer)
    {
        selectedProducer = producer;
        isConfirmModalOpen = true;
    }
    private void HandleCancel()
    {
        // Reset the flag
        isConfirmModalOpen = false;
        selectedProducer = null;
    }
    private void HandleConfirm()
    {
        if (selectedProducer != null)
        {
            // TODO: Implement the logic to delete the selected producer
            dataAccess.DAO.RemoveProducer(selectedProducer.Id);

            // Refresh the producers list
            producers = dataAccess.DAO.GetAllProducers().ToList();
            filteredProducers = producers;
        }

        // Reset the flag and selected producer
        isConfirmModalOpen = false;
        selectedProducer = null;
    }
    private void Search()
    {
        filteredProducers = producers
            .Where(producer => producer.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    protected override void OnInitialized()
    {
        producers = dataAccess.DAO.GetAllProducers().ToList();
        filteredProducers = producers;
    }
}